@model Project.Models.StudentAndCourse

<div class="table-container" style="max-width: 1600px; margin: 0 auto; padding: 20px;">
    <!-- Öğrenci bilgisini saklayan gizli alan -->
    <div id="studentInfo" data-student-id="@Model.Student.StudentID"></div>

    <form id="form" method="post" asp-action="SubmitSelectedCourses" asp-controller="Students">
        <table class="table table-bordered" style="width: 100%; font-size: 22px; border: 2px solid black;">
            <thead>
                <tr>
                    <th style="background-color: yellowgreen; color: white; text-align: center; font-size: 24px; padding: 20px;">Course Name</th>
                    <th style="background-color: yellowgreen; color: white; text-align: center; font-size: 24px; padding: 20px;">Mandatory</th>
                    <th style="background-color: yellowgreen; color: white; text-align: center; font-size: 24px; padding: 20px;">Credit</th>
                    <th style="background-color: yellowgreen; color: white; text-align: center; font-size: 24px; padding: 20px;">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var selection in Model.Course)
                {
                    @if (!@selection.IsMandatory && selection.Quota > 0)
                    {
                        <tr>
                            <td style="text-align: center; padding: 20px;">@selection.CourseName</td>
                            <td style="text-align: center; padding: 20px;">@(selection.IsMandatory ? "Mandatory" : "Elective")</td>
                            <td style="text-align: center; padding: 20px;">@selection.Credit</td>
                            <td style="text-align: center; padding: 20px;">
                                <input type="checkbox" name="SelectedCourseIds" value="@selection.CourseID" style="transform: scale(2);" />
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <div class="form-group" style="text-align: center; margin-top: 40px;">
            <button type="submit" id="submitBtn" class="btn btn-primary" style="background-color: #007bff; border: none; padding: 20px 40px; border-radius: 15px; font-size: 22px; cursor: pointer;">
                Submit Selection
            </button>
        </div>
    </form>
</div>
<button onclick="window.location.href='@Url.Action("CourseSelection", "Students", new { id = Model.Student.StudentID })'"
        class="back-link btn btn-secondary"
        style="margin-top: 30px; display: block; margin-left: auto; margin-right: auto; background-color: darkred; border: none; padding: 20px 40px; border-radius: 15px; font-size: 22px; color: white; cursor: pointer;">
    Back
</button>

<div id="cardContainer"></div>

<script>
    // Formu gönderme işleminde kontrol
    document.getElementById("form").addEventListener("submit", function (event) {
        event.preventDefault(); // Varsayılan form gönderimini engelle

        // Seçilen derslerin ID'lerini al
        const selectedCourseIds = Array.from(document.querySelectorAll("input[name='SelectedCourseIds']:checked"))
            .map(checkbox => checkbox.value);

        // Öğrenci ID'sini al
        const studentId = document.getElementById("studentInfo").dataset.studentId;

        // Eğer hiçbir ders seçilmemişse bildirim göster ve işlemi durdur
        if (selectedCourseIds.length === 0) {
            showNotification("No courses selected.", "error");
            return;
        }

        // Eğer 3'ten az ders seçilmişse bildirim göster ve işlemi durdur
        if (selectedCourseIds.length < 3) {
            showNotification("You must select at least 3 courses.", "error");
            return;
        }

        // AJAX isteği gönder
        fetch("https://localhost:7199/api/StudentController/SubmitSelectedCourses", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ StudentId: studentId, SelectedCourseIds: selectedCourseIds })
        })
        .then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error("An error occurred while submitting the courses.");
            }
        })
        .then(data => {
            showNotification("Courses submitted successfully!", "success");
        })
        .catch(error => {
            console.error(error);
            showNotification("Failed to submit courses.", "error");
        });
    });

    // Checkbox değişikliklerini dinleyerek kontrol mekanizması
    document.querySelectorAll("input[name='SelectedCourseIds']").forEach(checkbox => {
        checkbox.addEventListener("change", function () {
            // Seçili checkbox'ların sayısını kontrol et
            const selectedCount = document.querySelectorAll("input[name='SelectedCourseIds']:checked").length;

            // Eğer seçili checkbox sayısı üçü aşıyorsa, değişikliği engelle ve kullanıcıyı bilgilendir
            if (selectedCount > 3) {
                this.checked = false; // Kullanıcının seçimini geri al
                showNotification("You can select a maximum of 3 courses.", "error");
            }
        });
    });

    // Bildirim gösterme fonksiyonu
    function showNotification(message, type) {
        const notification = document.createElement("div");
        notification.className = `notification ${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            border: 3px solid ${type === 'error' ? 'red' : 'green'};
            padding: 20px 30px;
            border-radius: 12px;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
            font-size: 22px;
            z-index: 1000;
        `;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
    }
</script>
